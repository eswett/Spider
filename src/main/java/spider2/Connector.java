/*
  * This Java source file was generated by the Gradle 'init' task.
 */
package spider2;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

import javax.net.ssl.*;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;


/****************************************************************************
 * <b>Title:</b> Connection.java
 * <b>Project:</b> Spider
 * <b>Description:</b> Class to make client-server connection via a socket
 * with input and output streams
 * 
 * 
 * <b>Copyright:</b> Copyright (c) 2023
 * <b>Company:</b> Silicon Mountain Technologies
 * 
 * @author Evan Swett
 * @version 3.0
 * @since April 4, 2023
 * <b>updates:</b>
 * 
 ****************************************************************************/

public class Connector {
	
//    SSLSocket socket = null; // how come this is not used?
    private String baseURL;
    private int port;
    
    Set<String> cookies = new HashSet<>();
    /**
     * Parameterized constructor to set default values for the address and port
     * we're working with
     * @param host
     * @param port
     */
    Connector(String host, int port) {
    	baseURL = host;
    	this.port = port;
    }
    
    /** getHTML makes a socket connection to the server and makes an http GET
     * request on a specified path. The socket is created in a try-with-resources
     * block so it automatically closes the input and output streams and then the connection.
     * The read-in data is constantly appended to a stringbuilder and finally returned as a string
     * 
     * @param host
     * @param portNumber
     * @param path
     * @return
     */
    public String getHTML(String host, int portNumber, String path) {
    	StringBuilder html = new StringBuilder();

    	//To build an SSL socket I can use this factory method to do so
    	SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();

    	//I make the socket in a try-catch block so that it automatically closes after reading in data
    	//when the socket closes, first the in and out streams close
    	try (SSLSocket socket = (SSLSocket) factory.createSocket(host, portNumber)) {
    		
    		BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    		PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
    		
    		System.out.println("Socket made");
    		
    		out.println("GET " + path + " HTTP/1.1"); //adding these carriage returns made the call work / " + path + "
	        out.println("Host: " + host);
	        out.println("Connection: close"); //Without this the server waits to listen to old sockets
	        out.println();
	        
	        String inData = null;
	    	
	        while((inData = in.readLine()) != null) {
	           html.append(inData);
	        }
	        
    	} catch (IOException e) {
    		e.printStackTrace();
    	}
    	return html.toString();
    }
    
    
    public String postRequest(String host, int portNumber) {
    	StringBuilder html = new StringBuilder();

    	//To build an SSL socket I can use this factory method to do so
    	SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();

    	//I make the socket in a try-catch block so that it automatically closes after reading in data
    	//when the socket closes, first the in and out streams close
    	try (SSLSocket socket = (SSLSocket) factory.createSocket(host, portNumber)) {
    		
    		BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    		PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
    		
    		System.out.println("Socket made");
    		
    		out.println("POST /admintool HTTP/1.1"); //adding these carriage returns made the call work / " + path + "
	        out.println("Host: " + host);
	        out.println("Connection: close");
	        out.println();
	        
	        String inData = null;
	    	
	        while((inData = in.readLine()) != null) {
	        	if(inData.startsWith("Set-Cookie")) {
	        		System.out.println(inData.substring(12, inData.indexOf(";")));

	        		cookies.add(inData.substring(12, inData.indexOf(";")));
	        	}
	            html.append(inData).append(" ");
	        }
	        
    	} catch (IOException e) {
    		e.printStackTrace();
    	}
    	return html.toString();
    }
    
    public Set<String> getCookies() {
    	return cookies;
    }
    
    

    /**
     * This method takes a set of absolute paths to all pages on the website, 
     * makes GET requests to grab page HTML data as string, and then builds
     * an arraylist of JSoup documents with them. 
     * @param urlStrings
     * @return
     */
	public List<Document> buildDocs(Set<String> urlStrings) {
		
		List<Document> docs = new ArrayList<>();
		
		for(String absolutePath: urlStrings) {
			String fullHTML = getHTML(baseURL, port, absolutePath);
			Document d = Jsoup.parse(fullHTML);
			docs.add(d);
		}
		return docs;
	}
}
